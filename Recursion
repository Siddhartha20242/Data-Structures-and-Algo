What is Recursion?
-- recursion is a phenomenon when a function call itself repeatedly until a specified condition
is fulfilled.

Understanding Recursion
-- If a function keeps calling itself without a base condition, it will run indefinitely until
the stack runs out of memory(resulting in stack overflow).

What is stack overflow in Recusrion?
-- When recursive calls are made, they are stored in a recursion stack. A recursive function
  can only complete if a base condition is fulfilled, allowing control to return to the parent 
  funtion. Without a base condition, the function continues to call itself, leading to stack
  overflow(exceeding the memory limit of the recursion stack).


Base condition
The base condition is essential in a recursive function to ensure it terminates and doesnot
run indefinitely. Once the base condition is met, the function stops executing and returns
control back to the parent function.

Example:

cnt = 0
def print_numbers():
   global cnt
   #THis is the base condition
   if cnt == 3:
     return
   print(cnt) #Print current count
   cnt += 1
   print_numbers()

if __name__ == '__main__':
     print_numbers()



                  PRINT NAME N TIMES USING RECURSION

    function func(1, n){
         // Base Condition
    if (i > n) return;
    console.log('Siddhartha');

    // Function call to print till i increments
    func(i + 1, n);
   }
    function main(){
    //Prompt the user for input. Use the parsing method to do so means that
      if the argument value is not a string, it will be converted to one using the 
      ToString abstraction method. Parsing basically means to analyze a string of symbols
      in either natural language or computer languages, to extract meaningful information or structure
from it.



    let n = parseInt(prompt("Enter a number: ")); // Using prompt to get user input
    func(1, n);
}
main();




                      PRINT 1 TO N USING RECURSION

function func(i, n){
    if (i > n) return; // THis is the base case 
    console.log(i);

    func(i + 1, n); // This is the function call to print i till i increments to n
}
func main(){
   let n = 4;
   func(1, n);
}
// This is the function call that is used to call the function and will execute it.
main();

Using the Alternative Approach(Backtracking)

          function func(i, n){
               // Base condition
              if (i < 1) return; // If i is less than 1, terminate the recursion
          
              func(i - 1, n); // Function call to print (n - 1) integers
              console.log(i); // Print the current value of i;
          }
          
          function main(){
              let n = parseInt(prompt("Enter a number: ")) // Get a user input
              func(n, n); // Start the recursion from n
          }
          
          //Execute the main function
          main();

Time Complexity: 0(N) - Since the function is being called N times, and for each function call,
we have only one printable line that takes 0(1) time, so the cumulative time complexity would
be 0(N).





                    PRINT N TO 1 USING RECURSION

function func(i, n){
     // Base Condition
      if (i < n) return; // If i is less than 1, terminate the recursion
      console.log(i); // Print the current value of i

     // Recursive call to print i until it decrements to 1.
      func(i - 1, n); 
}

      function main(){
          // Here, let's take the value of n to be 4
          let n = 4;  // We can also use prompt to get input from the user
          func(n, n); // Start the recursion from n
      }
      //Execute the main function
      main();


- Time Complexity - 0(N): Since the function is called N times, and for each function call,
we have only one printable line that takes 0(1) time, the cumulative time complexity is 0(N).

               Space Complexity
0(N): In the worst case, the recursion stack space would be full with all the function calls
waitiong to be completed, making it 0(N) recursion stack space.



        Alternative Approach(backtracking)

        function func(i, n){
           // Base condition
            if (i >  n) return; // If i is greater than n, terminate the recursion
            
            func(i + 1, n); // Recursive call to print(i + 1) integers
            
            console.log(i) // Print the current value of i
        
        }
        function main(){
            // Here, let's take the value of n to be 4
            let n = 4; // We can also use prompt to get input from the user.
            func(i, n); // Start the recursion from 1
        }
        main(); // Execute the main function.










            SUM OF FIRST N NATURAL NUMBERS

Problem Statement:
Given a number of 'N', find out the sum of the first N natural numbers.


          Solution 1: Using the loop

function sumUsingLoop(n){
    let sum = 0
    for (let i = 0, i <= n, i++){
          sum += i
   }
console.log(`The sum of the first {n} numbers is: ${sum}`)
}
sumUsingLoop(5);
sumUsingLoop(6);

Time Complexity: 0(N)
Space Complexity: 0(1)



              Using the Formula

We can use the formula for the sum of N numbers i.e N(N + 1) / 2.

function sumUsingFormula(n){
      let sum = (n + (n + 1)) / 2;
       console.log(`The sum of the first ${n} numbers is: ${sum}`);

}
sumUsingFormula(5);
sumUsingFormula(4);

Time Complexity: 0(1)
Time Complexity: 0(1)



          Recursive Approach

1. Parameterized Way
- In this approach, instead of using a global variable for calculating the sum, we pass the 
sum in the parameters of the function.

function sumParameterized(i, sum){
    // Base Condition
     if (i < 1){
      console.log(sum);
      return;
   }
   sumParameterized(i - 1, sum + 1); // Function call to increment sum by i until i decrements
to 1
}
const n1 = 3;
sumParameterized(n1, 0)

Time Complexity: 0(N)
Space Complexity: 0(N)



          2. Functional Way

- This approach uses a simple recursion method.
 function sumFunctional(n){
     if (n == 0){
         return 0;
     }
      return n + sumFactorial(n - 1);
}
const n2 = 3;
console.log(sumFunctional(n2));

Time Complexity: 0(N)
Space Complexity: 0(N)

















                    FACTORIAL OF N NUMBER: ITERATIVE AND RECURSIVE

Solution 1: Iterative Approach

          function factorialIterative(X){
                   let ans = 0;
                  for (let i = 1; i <= X; i++){
                       ans += 1;
                  }
                   return ans;
          }
          
          const X1 = 5;
          const result1 = factorailIterative(X1);
          console.log(`The factorail of ${x} is ${result1}`); 

Time Complexity: 0(N)
Space Complexity: 0(1)


Solution 2: Recursive Approach

Approach: The factorial of a number X can be defined recursively:
factorial(X) = N * factorial(N - 1)
Base case: If N = 0, return 1, 


          function factorailRecursion(n){
               if (n == 0){
                  return 1;
               }
                return n * factorailRecursion(n - 1);
          }
          // Example usage
          const X2 = 3;
          const result2 = factorialRecursive(X2)
          console.log(result2); // Output: 6





            REVERSE A GIVEN ARRAY

        Solution 1: Using an extra array

Approach: Declare an array, ans[] of the same size as the input array. Iterate
from the back of the input array while sorting the elements in ans[] in opposite direction.

// This is a non-inplace swapping.
function printArray(arr){
      console.log('The reversed array is: ');
      console.log(arr.join(" "));
}
function reverseArrayUsingExtra(arr){
      const n = arr.length;
      const ans = new Array(n);
      for (let i = n - 1; i >= 0; i--){  // Initially our i is 4 because the length of our arr is 4 so n-1 = 4.

// Now in the next line we set the ans[5-4-1] = arr[0] So ans[4] = arr[ans]. The index of the original arr is 
n-1 so we have done from that.

        ans[n - i - 1] = arr[i];
      }
        printArray(ans);
}
const arr1 = [5, 4, 3, 2, 1] 
reverseArrayUsingExtraArray(arr1); // Explain this using example in each line.

Time Complexity: 0(n)
Space Complexity: 0(n)(for the extra space)



                      Space Optimized Method - Iterative
We use the same array to obtain the result. Use two pointers, p1 at the start and
p2 at the end of the array. Swap the element's provided by p1 and p2, then increemnt p1
and p1.


       function reverseArrayInPlace(arr){
           let p1 = 0;              // IN this and next line we use two pointers to do the swaping of elements.
           let p2 = arr.length - 1;
           while (p1 < p2){
             [arr[p1], arr[p2]] = [arr[p2], arr[p1]];
              p1++;
              p2++;
           }
          printArray(arr);
       }
cosnt arr2 = [5, 4, 3, 2, 1]
reverseArrayInPlace(arr2);



                      Recursive Method
- This method takes the array, a start index, an end index as parameters. Swap
the elements at the start and end index, then recursively call the function for the 
subarray.

function recursiveArrayRecursively(arr, start, end){
   if (start < end){
         [arr[start], arr[end]] = [arr[end], arr[start]];
          recursiveArrayRecursively(arr, start + 1, end - 1);
   }
}

const arr3 = [5, 4, 3, 2, 1]
reverseArrayRecursively(arr3, 0, arr3.length - 1);
printArray(arr3);

Time Complexity: 0(n)
Space Complexity: 0(1)




            Using Built-in Function
- Using the built in Array.prototypereverse() method to reverse the array in place.

function reverseArrayUsingBuiltIn(arr){
           arr.reverse();
          printArray(arr);
}
const arr4 = [5, 4, 3, 2, 1]
reverseArrayUsingBuiltIn(arr4);


                      Checking If a given string is Palindrome or not

A string is said to be palindrome if the reverse of the string is the same as the 
string.

Approach:
1. Run for a loop till half the length of the string in order to check the first and last
 character of the string.
2. Check if the first and last elements of the string are equal. And then move 
both pointers first pointer forward and last pointer backward.



        First Approach
/* Function to check if a given string is a palindrome.
/* A string is a palindrome if it reads the same forwards and backwards.

/**
 * Function to check if a given string is a palindrome.
 * A string is a palindrome if it reads the same forwards and backwards.
 *
 * @param {string} str - The string to check.
 * @returns {boolean} - Returns true if the string is a palindrome, false otherwise.
 * 
 * @example
 * 
 * const result = isPalindrome("ABCDCBA");
 * console.log(result); // Outputs: true
 */
function isPalindrome(str) {
    let left = 0;                // Initialize left pointer
    let right = str.length - 1;  // Initialize right pointer

    while (left < right) {
        const l = str.charAt(left);  // Get character at left pointer
        const r = str.charAt(right); // Get character at right pointer
        
        // Ignore non-alphanumeric characters
        if (!isLetterOrDigit(l)) {
            left++; // Move left pointer to the right
        } else if (!isLetterOrDigit(r)) {
            right--; // Move right pointer to the left
        } else if (l.toLowerCase() !== r.toLowerCase()) {
            return false; // Characters do not match
        } else {
            left++;  // Move both pointers inward
            right--;
        }
    }
    
    return true; // All characters matched, it is a palindrome
}

/**
 * Helper function to check if a character is a letter or a digit.
 * 
 * @param {string} char - The character to check.
 * @returns {boolean} - Returns true if the character is a letter or digit, false otherwise.
 * 
 * @example
 * 
 * const isAlphaNumeric = isLetterOrDigit('A');
 * console.log(isAlphaNumeric); // Outputs: true
 */
function isLetterOrDigit(char) {
    return /^[A-Za-z0-9]$/.test(char); // Regular expression to match alphanumeric characters
}

// Example usage of isPalindrome function
const str1 = "ABCDCBA";
console.log(isPalindrome(str1) ? "Palindrome" : "Not Palindrome"); // Outputs: Palindrome

const str2 = "TAKE U FORWARD";
console.log(isPalindrome(str2) ? "Palindrome" : "Not Palindrome"); // Outputs: Not Palindrome










            Reursive Approach
/**
 * Recursive function to check if a given string is a palindrome.
 *
 * @param {string} str - The string to check.
 * @param {number} left - The current left index (defaults to 0).
 * @param {number} right - The current right index (defaults to length of the string - 1).
 * @returns {boolean} - Returns true if the string is a palindrome, false otherwise.
 * 
 * @example
 * 
 * const result = recursivePalindrome("madam");
 * console.log(result); // Outputs: true
 */
function recursivePalindrome(str, left = 0, right = str.length - 1) {
    // Base Condition: if left index exceeds or meets right index, all characters matched
    if (left >= right) return true; 

    // Ignore non-alphanumeric characters
    if (!isLetterOrDigit(str.charAt(left))) {
        return recursivePalindrome(str, left + 1, right); // Move left pointer
    }
    if (!isLetterOrDigit(str.charAt(right))) {
        return recursivePalindrome(str, left, right - 1); // Move right pointer
    }

    // Check characters at left and right indices
    if (str.charAt(left).toLowerCase() !== str.charAt(right).toLowerCase()) {
        return false; // Characters do not match
    }

    // Move to the next pair of characters
    return recursivePalindrome(str, left + 1, right - 1);
}

// Example usage of recursivePalindrome function
console.log(recursivePalindrome("madam") ? "Palindrome" : "Not Palindrome"); // Outputs: Palindrome












































































































































  
